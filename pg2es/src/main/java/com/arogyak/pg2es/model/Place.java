package com.arogyak.pg2es.model;

import java.util.List;

import javax.persistence.Id;

import org.springframework.data.elasticsearch.annotations.Document;
import org.springframework.data.elasticsearch.annotations.MultiField;

import org.springframework.data.elasticsearch.annotations.InnerField;
import org.springframework.data.elasticsearch.annotations.Field;
//import org.springframework.data.elasticsearch.annotations.Setting;
import org.springframework.data.elasticsearch.annotations.FieldType;
import org.springframework.data.elasticsearch.annotations.GeoPointField;

/**
 * The Elastic Search representation of a place. This is how a place entity will
 * be indexed in Elastic Search.
 * 
 * @author arogyakoirala
 *
 */
@Document(indexName = "oldplace", createIndex = true)
//@Setting(settingPath = "analyzer.json")
public class Place {

	@Id
	@org.springframework.data.annotation.Id
	private Long placeId;
	private Long osmId;
	private String osmType;
	private String houseNumber;

//	@MultiField(mainField = @Field(type = FieldType.Text, store = true), otherFields = {
//			@InnerField(suffix = "combined", type = FieldType.Text, store = true, analyzer = "edgeNGramAndShingle_analyzer", searchAnalyzer = "searchKeyword_analyzer"),
//			@InnerField(suffix = "keyword", type = FieldType.Keyword, store = true),
//			@InnerField(suffix = "ngram", type = FieldType.Text, store = true, analyzer = "nGram_analyzer", searchAnalyzer = "searchKeyword_analyzer"),
//			@InnerField(suffix = "shingle", type = FieldType.Text, store = true, analyzer = "shingle_analyzer", searchAnalyzer = "searchKeyword_analyzer"),
//			@InnerField(suffix = "engram", type = FieldType.Text, store = true, analyzer = "edgeNGram_analyzer", searchAnalyzer = "searchKeyword_analyzer"), })
	private String address;
	private String classification;
	private String type;

	private Integer searchRank;
	private Integer addressRank;
	private String geometryType;

	private Object geometry;

	@GeoPointField
	private LatLon centroid;

	private List<String> tags;
	private String country;
	private Integer adminLevel;

//	@MultiField(mainField = @Field(type = FieldType.Text, store = true), otherFields = {
//			@InnerField(suffix = "combined", type = FieldType.Text, store = true, analyzer = "edgeNGramAndShingle_analyzer", searchAnalyzer = "searchKeyword_analyzer"),
//			@InnerField(suffix = "keyword", type = FieldType.Keyword, store = true),
//			@InnerField(suffix = "ngram", type = FieldType.Text, store = true, analyzer = "nGram_analyzer", searchAnalyzer = "searchKeyword_analyzer"),
//			@InnerField(suffix = "shingle", type = FieldType.Text, store = true, analyzer = "shingle_analyzer", searchAnalyzer = "searchKeyword_analyzer"),
//			@InnerField(suffix = "engram", type = FieldType.Text, store = true, analyzer = "edgeNGram_analyzer", searchAnalyzer = "searchKeyword_analyzer"), })
	private String name;

//	
//	@Field(type = FieldType.Text, analyzer = "nGram_analyzer", searchAnalyzer = "whitespace_analyzer")
//	private String name;

	/**
	 * @param placeId        The identifier for a place, as generated by Nominatim.
	 * @param osmId          The identifier of a place, as present in the source OSM
	 *                       file.
	 * @param osmType        The type of OSM entity; one of N (for node), W (for
	 *                       way), or R (for relation)
	 * @param houseNumber    The house number associated with a given place. The API
	 *                       doesnt make use of this info at present.
	 * @param address        The address of the place, as generated by Nominatim,
	 *                       but stripped of the "name" portion.
	 * @param classification The OSM classification of a place; i.e. the primary key
	 *                       for the entity (amenity, office, etc.).
	 * @param type
	 * @param searchRank     Search rank of the place as assigned as per the address
	 *                       level configuration file, useful in prioritizing search
	 *                       results.
	 * @param addressRank    Address rank of the place assigned as per the address
	 *                       level configuration file, used by the Nominatim
	 *                       algorithm when calculating address.
	 * @param geometry       The geometry in GeoJSON form
	 * @param geometryType   Geometry type; one of POINT, LINESTRING, POLYGON
	 * @param centroid       Centroid (lat,lon) of the place.
	 * @param tags           Array list of OSM non-location related tags.
	 * @param country        Country
	 * @param adminLevel     Admin level of the place, calculated by Nominatim.
	 * @param name           Name of the place
	 * @param name712        Name of the place (for indexing with edge n-gram
	 *                       between 7 to 12 letters)
	 * @param name1320       Name of the place (for indexing with edge n-gram
	 *                       between 13 to 20 letters)
	 * @param fullName       Name and address combined
	 * @param processedName  Used for fuzzy search facilitation, a combination of
	 *                       name and address field, where all spaces are removed,
	 *                       to facilitate better search.
	 */
	public Place(Long placeId, Long osmId, String osmType, String houseNumber, String address, String classification,
			String type, Integer searchRank, Integer addressRank, String geometryType, Object geometry, LatLon centroid,
			List<String> tags, String country, Integer adminLevel, String name) {
		super();
		this.placeId = placeId;
		this.osmId = osmId;
		this.osmType = osmType;
		this.houseNumber = houseNumber;
		this.address = address;
		this.classification = classification;
		this.type = type;
		this.searchRank = searchRank;
		this.addressRank = addressRank;
		this.geometryType = geometryType;
		this.geometry = geometry;
		this.centroid = centroid;
		this.tags = tags;
		this.country = country;
		this.adminLevel = adminLevel;
		this.name = name;
	}

	/**
	 * @return the placeId
	 */
	public Long getPlaceId() {
		return placeId;
	}

	/**
	 * @param placeId the placeId to set
	 */
	public void setPlaceId(Long placeId) {
		this.placeId = placeId;
	}

	/**
	 * @return the osmId
	 */
	public Long getOsmId() {
		return osmId;
	}

	/**
	 * @param osmId the osmId to set
	 */
	public void setOsmId(Long osmId) {
		this.osmId = osmId;
	}

	/**
	 * @return the osmType
	 */
	public String getOsmType() {
		return osmType;
	}

	/**
	 * @param osmType the osmType to set
	 */
	public void setOsmType(String osmType) {
		this.osmType = osmType;
	}

	/**
	 * @return the houseNumber
	 */
	public String getHouseNumber() {
		return houseNumber;
	}

	/**
	 * @param houseNumber the houseNumber to set
	 */
	public void setHouseNumber(String houseNumber) {
		this.houseNumber = houseNumber;
	}

	/**
	 * @return the address
	 */
	public String getAddress() {
		return address;
	}

	/**
	 * @param address the address to set
	 */
	public void setAddress(String address) {
		this.address = address;
	}

	/**
	 * @return the classification
	 */
	public String getClassification() {
		return classification;
	}

	/**
	 * @param classification the classification to set
	 */
	public void setClassification(String classification) {
		this.classification = classification;
	}

	/**
	 * @return the type
	 */
	public String getType() {
		return type;
	}

	/**
	 * @param type the type to set
	 */
	public void setType(String type) {
		this.type = type;
	}

	/**
	 * @return the searchRank
	 */
	public Integer getSearchRank() {
		return searchRank;
	}

	/**
	 * @param searchRank the searchRank to set
	 */
	public void setSearchRank(Integer searchRank) {
		this.searchRank = searchRank;
	}

	/**
	 * @return the addressRank
	 */
	public Integer getAddressRank() {
		return addressRank;
	}

	/**
	 * @param addressRank the addressRank to set
	 */
	public void setAddressRank(Integer addressRank) {
		this.addressRank = addressRank;
	}

	/**
	 * @return the geometryType
	 */
	public String getGeometryType() {
		return geometryType;
	}

	/**
	 * @param geometryType the geometryType to set
	 */
	public void setGeometryType(String geometryType) {
		this.geometryType = geometryType;
	}

	/**
	 * @return the geometry
	 */
	public Object getGeometry() {
		return geometry;
	}

	/**
	 * @param geometry the geometry to set
	 */
	public void setGeometry(Object geometry) {
		this.geometry = geometry;
	}

	/**
	 * @return the centroid
	 */
	public LatLon getCentroid() {
		return centroid;
	}

	/**
	 * @param centroid the centroid to set
	 */
	public void setCentroid(LatLon centroid) {
		this.centroid = centroid;
	}

	/**
	 * @return the tags
	 */
	public List<String> getTags() {
		return tags;
	}

	/**
	 * @param tags the tags to set
	 */
	public void setTags(List<String> tags) {
		this.tags = tags;
	}

	/**
	 * @return the country
	 */
	public String getCountry() {
		return country;
	}

	/**
	 * @param country the country to set
	 */
	public void setCountry(String country) {
		this.country = country;
	}

	/**
	 * @return the adminLevel
	 */
	public Integer getAdminLevel() {
		return adminLevel;
	}

	/**
	 * @param adminLevel the adminLevel to set
	 */
	public void setAdminLevel(Integer adminLevel) {
		this.adminLevel = adminLevel;
	}

	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	public Place() {
		super();
	}

}
